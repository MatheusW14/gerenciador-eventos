from eventos import eventos
from collections import Counter
from participantes import participantes


def participantes_mais_ativos():
    """
    Retorna os 5 participantes mais ativos em eventos.

    A fun√ß√£o percorre uma lista de eventos, contabilizando a frequ√™ncia de participa√ß√£o
    de cada participante. Utiliza a classe Counter para contar as ocorr√™ncias de cada
    participante e retorna os 5 participantes com maior n√∫mero de participa√ß√µes.

    Retorna:
        list: Uma lista de tuplas contendo os 5 participantes mais ativos e suas respectivas
        contagens de participa√ß√µes, ordenados em ordem decrescente de frequ√™ncia.
    """
    contagem = Counter()
    for evento in eventos:
        for id_participante in evento["participantes"]:
            contagem[id_participante] += 1
    return contagem.most_common(5)


def temas_mais_frequentes():
    """
    Retorna os tr√™s temas mais frequentes em uma lista de eventos.

    A fun√ß√£o percorre uma lista de eventos, extrai os temas de cada evento
    e calcula a frequ√™ncia de ocorr√™ncia de cada tema. Em seguida, retorna
    os tr√™s temas mais comuns e suas respectivas contagens.

    Retorna:
        list: Uma lista de tuplas contendo os tr√™s temas mais frequentes e
        suas respectivas contagens, no formato [(tema1, contagem1), (tema2, contagem2), (tema3, contagem3)].

    Exemplo:
        >>> eventos = [{"tema": "Tecnologia"}, {"tema": "Sa√∫de"}, {"tema": "Tecnologia"}]
        >>> temas_mais_frequentes()
        [("Tecnologia", 2), ("Sa√∫de", 1)]
    """
    temas = [evento["tema"] for evento in eventos]
    return Counter(temas).most_common(3)


def eventos_risco_cancelamento(limite=2):
    """
    Retorna uma lista de eventos que est√£o em risco de cancelamento devido a um n√∫mero insuficiente de participantes.

    Um evento √© considerado em risco de cancelamento se o n√∫mero de participantes for menor que o limite especificado.

    Args:
        limite (int, opcional): O n√∫mero m√≠nimo de participantes necess√°rio para que um evento n√£o seja considerado em risco.
                                O valor padr√£o √© 2.

    Returns:
        list: Uma lista de eventos (dicion√°rios) que possuem menos participantes do que o limite especificado.
    """
    return [e for e in eventos if len(e["participantes"]) < limite]


def eventos_por_tema():
    """
    Organiza eventos por tema.

    Esta fun√ß√£o percorre uma lista de eventos e agrupa os nomes dos eventos
    por tema. O resultado √© um dicion√°rio onde as chaves s√£o os temas e os
    valores s√£o listas contendo os nomes dos eventos associados a cada tema.
    O dicion√°rio final √© ordenado alfabeticamente pelas chaves (temas).

    Returns:
        dict: Um dicion√°rio ordenado onde as chaves s√£o os temas e os valores
        s√£o listas de nomes de eventos associados a cada tema.
    """
    temas = {}
    for evento in eventos:
        temas.setdefault(evento["tema"], []).append(evento["nome"])
    return dict(sorted(temas.items()))


def eventos_do_participante(id_participante):
    """
    Retorna uma lista de eventos nos quais um participante espec√≠fico est√° inscrito.

    Args:
        id_participante (int): O identificador √∫nico do participante.

    Returns:
        list: Uma lista de dicion√°rios representando os eventos em que o participante est√° inclu√≠do.
    """
    return [evento for evento in eventos if id_participante in evento["participantes"]]


def taxa_media_participacao_por_tema():
    """
    Calcula a taxa m√©dia de participa√ß√£o por tema de eventos.
    Esta fun√ß√£o percorre uma lista de eventos, agrupando os temas e calculando
    a m√©dia de participantes para cada tema. O resultado √© um dicion√°rio onde
    as chaves s√£o os temas e os valores s√£o as m√©dias arredondadas para duas
    casas decimais.
    Returns:
        dict: Um dicion√°rio contendo os temas como chaves e as taxas m√©dias de
        participa√ß√£o como valores.
    """
    temas = {}
    for evento in eventos:
        tema = evento["tema"]
        temas.setdefault(tema, []).append(len(evento["participantes"]))

    return {
        tema: round(sum(valores) / len(valores), 2) for tema, valores in temas.items()
    }


def exibir_participantes_mais_ativos():
    """
    Exibe uma lista dos participantes mais ativos em eventos.
    Esta fun√ß√£o utiliza os dados retornados pela fun√ß√£o `participantes_mais_ativos`
    para listar os participantes que mais participaram de eventos, ordenados pelo
    n√∫mero total de eventos. Caso n√£o haja atividades registradas, uma mensagem
    informativa ser√° exibida.
    Para cada participante listado, s√£o exibidos:
    - Nome do participante (ou "Desconhecido" caso o participante n√£o seja encontrado).
    - ID do participante.
    - Total de eventos em que participou.
    Retorna:
        None: Esta fun√ß√£o apenas exibe informa√ß√µes no console.
    """
    print("\n--- üë• Participantes mais Ativos ---")
    dados = participantes_mais_ativos()
    if not dados:
        print("Nenhuma atividade registrada.")
        return

    for pid, total in dados:
        p = next((p for p in participantes if p["id"] == pid), None)
        nome = p["nome"] if p else "Desconhecido"
        print(f"{nome} ({pid}) - {total} evento(s)")


def exibir_temas_mais_frequentes():
    """
    Exibe os temas mais frequentes registrados em eventos.
    Esta fun√ß√£o utiliza a fun√ß√£o `temas_mais_frequentes` para obter os dados
    dos temas mais frequentes e os exibe no console. Caso n√£o haja dados
    dispon√≠veis, uma mensagem informativa ser√° exibida.
    Sa√≠da:
        - Lista de temas com a quantidade de eventos associados a cada tema.
        - Mensagem informativa caso n√£o existam eventos registrados.
    """
    print("\n--- üåü Temas mais Frequentes ---")
    dados = temas_mais_frequentes()
    if not dados:
        print("Nenhum evento com tema registrado.")
        return

    for tema, total in dados:
        print(f"{tema} - {total} evento(s)")


def exibir_eventos_risco_cancelamento():
    """
    Exibe uma lista de eventos que est√£o em risco de cancelamento devido ao baixo n√∫mero de participantes.
    A fun√ß√£o utiliza a fun√ß√£o `eventos_risco_cancelamento` para obter os dados dos eventos com poucos participantes.
    Caso n√£o haja eventos em risco, uma mensagem informativa ser√° exibida.
    Para cada evento em risco, s√£o exibidos o nome, o ID e o n√∫mero de participantes.
    Retorno:
        None: A fun√ß√£o apenas exibe informa√ß√µes no console e n√£o retorna nenhum valor.
    """
    print("\n--- ‚ö†Ô∏è Eventos com Risco de Cancelamento (poucos participantes) ---")
    dados = eventos_risco_cancelamento()
    if not dados:
        print("Nenhum evento em risco.")
        return

    for e in dados:
        print(f"{e['nome']} ({e['id']}) - {len(e['participantes'])} participante(s)")


def exibir_eventos_por_tema_agrupado():
    """
    Exibe uma lista de eventos agrupados por tema.
    Esta fun√ß√£o utiliza os dados retornados pela fun√ß√£o `eventos_por_tema` para
    exibir os eventos organizados por tema. Caso n√£o existam eventos dispon√≠veis
    para agrupar, uma mensagem informativa ser√° exibida.
    Sa√≠da:
        - Para cada tema, exibe o nome do tema seguido por uma lista de eventos
          associados a ele.
        - Caso n√£o existam eventos, exibe "Nenhum evento para agrupar.".
    """
    print("\n--- üìö Eventos Agrupados por Tema ---")
    dados = eventos_por_tema()
    if not dados:
        print("Nenhum evento para agrupar.")
        return

    for tema, lista in dados.items():
        print(f"\n{tema}:")
        for nome in lista:
            print(f"  - {nome}")


def exibir_eventos_de_um_participante():
    """
    Exibe os eventos associados a um participante espec√≠fico.
    Solicita ao usu√°rio o ID de um participante, busca os eventos relacionados
    a esse participante e exibe uma lista formatada com os nomes e IDs dos eventos.
    Caso nenhum evento seja encontrado, informa ao usu√°rio.
    Retorno:
        None
    """
    pid = input("Digite o ID do participante: ").strip()
    dados = eventos_do_participante(pid)

    if dados:
        print(f"\n--- üìÖ Eventos do Participante {pid} ---")
        for e in dados:
            print(f"  - {e['nome']} ({e['id']})")
    else:
        print("Nenhum evento encontrado para este participante.")


def exibir_taxa_media_participacao_por_tema():
    """
    Exibe a taxa m√©dia de participa√ß√£o por tema com base nos dados fornecidos.
    Esta fun√ß√£o chama a fun√ß√£o `taxa_media_participacao_por_tema` para obter os dados
    de participa√ß√£o m√©dia por tema. Caso n√£o existam dados dispon√≠veis, uma mensagem
    informativa ser√° exibida. Caso contr√°rio, os temas e suas respectivas m√©dias de
    participantes por evento ser√£o apresentados no console.
    Retorno:
        None: Esta fun√ß√£o n√£o retorna valores, apenas exibe informa√ß√µes no console.
    """
    print("\n--- üìä Taxa M√©dia de Participa√ß√£o por Tema ---")
    dados = taxa_media_participacao_por_tema()
    if not dados:
        print("N√£o h√° dados para calcular a taxa.")
        return

    for tema, media in dados.items():
        print(f"{tema}: m√©dia de {media:.2f} participante(s) por evento")
